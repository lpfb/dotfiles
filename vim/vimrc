set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'scrooloose/nerdtree'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'tomtom/tcomment_vim'
Plugin 'flazz/vim-colorschemes'
Plugin 'vim-syntastic/syntastic'
Plugin 'nvie/vim-flake8'
Plugin 'terryma/vim-multiple-cursors'
Plugin 'Yggdroot/indentLine'
Plugin 'sheerun/vim-polyglot'
Plugin 'joshdick/onedark.vim'
Plugin 'morhetz/gruvbox'
Plugin 'ghifarit53/tokyonight-vim'
Plugin 'wadackel/vim-dogrun'
Plugin 'NLKNguyen/papercolor-theme'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required


"------------------------------------------------------------------------------
"                        PLUGINS CONFIGURATIONS
"------------------------------------------------------------------------------

"---------------------------
" Functions
"---------------------------
"Diff
function! DiffToggle()
  if &diff
    diffoff
  else
    diffthis
  endif
endfunction

"----------------------------------
" Mappgin <leader>
"----------------------------------
let mapleader = "'"

"----------------------------------
" Python Sintax Check and PEP8
"----------------------------------
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let  g:syntastic_python_checkers           =  ['flake8']
let  g:syntastic_always_populate_loc_list  =  1
let  g:syntastic_auto_loc_list             =  1
let  g:syntastic_check_on_open             =  1
let  g:syntastic_check_on_wq               =  0

"----------------------------------
" Indentation guide lines
"----------------------------------
let  g:indentLine_color_term    =  237
let  g:indentLine_bgcolor_term  =  16
let  g:indentLine_bgcolor_gui   =  '#FF5F00'
let  g:indentLine_char          =  'ยฆ'
" Impruving mkarkdown formatting character visualization
" ref: https://vi.stackexchange.com/questions/7258/how-do-i-prevent-vim-from-hiding-symbols-in-markdown-and-json
let g:indentLine_setConceal = 2
" default ''.
"    n for Normal mode
"    v for Visual mode
"    i for Insert mode
"    c for Command line editing, for 'incsearch'
let g:indentLine_concealcursor = "n" " formatting characters not visible only in normal mode

"---------------------------
" General Configurations
"---------------------------
" Showing unwanted spaces
let c_space_errors=1
set laststatus=2
set encoding=utf-8
" Tab configurations
set tabstop=4
set shiftwidth=4
set expandtab
" Auto identatioin
set smartindent
set autoindent
set ruler
set wrap "Wrap lines
" With this option it is possible to select something in visual mode and past
" outside vim with a right click
set mouse=n

set cursorline " enable line high light at cursor position. WARNING: this
" feature uses too much CPU

syntax on
set hlsearch
set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

"---------------------------
" Colorscheme configurations
"---------------------------
colorscheme onedark

let g:onedark_hide_endofbuffer=1
let g:onedark_termcolors=256
let g:airline_theme='onedark'

"---------------------------
"Key map settings
"---------------------------
" Toggle show line numbers
noremap <F1>   :set nonumber!<CR>
" Toggle NerdTree file navigator
nnoremap <F2> :NERDTreeToggle<CR>
" Show line endings and indentation character's
nnoremap <F3> :set list<CR>
" Hide line endings and indentation character's
nnoremap <F4> :set nolist<CR>
" Enable/Disable relative numbers
nnoremap <F5> :set relativenumber!<CR>
" reformat for a nice column layout
vnoremap <F7> :!column -t<CR>
" Enable/Disable syntax check
nnoremap <F8> :SyntasticToggleMode<CR>
" Reload and edit vimrc configuration
nnoremap <F10> :source ~/.vimrc<CR>
" Run Ctags
nnoremap <C-F11> :call RunCtags()<CR>

" Edit file in hexmode
nnoremap <C-h> :%!xxd<CR>
" Open vimrc in a new tab
nnoremap <C-E> :tabe $MYVIMRC<CR>
" Salve file using Ctrl+s
nnoremap <C-s> :w!<CR>
" Quit vim using Ctrl+q
nnoremap <C-q> :q<CR>
" Retab the entire file
nnoremap <C-T> :retab<CR>
" removes all trailing white spaces
nnoremap <silent> <C-Y> :let _s=@/ <Bar> :%s/\s\+$//e <Bar> :let @/=_s <Bar> :nohl <Bar> :unlet _s <CR>
" Moving lines up and down, respectively
noremap + dd<up><up>p
noremap - ddp
"Copy the selected data to linux clipboard. This option only works if vim "--version reposts +xterm_clipboard, if it reposts -xterm_clipboard you do not have suport.
map <C-C> "+y<CR>
" In insert and visual mode, press these jk instead of press esc
inoremap <C-J> <esc>
vnoremap <C-J> <esc>
" In visual mode, press 4 instead of $ to select until line end
vnoremap 4 $
" In visual mode, press รง to paste using 0 buffer
vnoremap รง "0p
" Remap <:> to <;> With it, it is possible to execute commands without press shift
nnoremap ; :

"Switching paste mode to prevent autoident
set pastetoggle=<F2>

" Remove the Windows ^M and convert it to Linux style
noremap <leader>w :set ff=unix<cr>

" Navigating betwenn tabs
nnoremap <leader>1 1gt
nnoremap <leader>2 2gt
nnoremap <leader>3 3gt
nnoremap <leader>4 4gt
nnoremap <leader>5 5gt
nnoremap <leader>6 6gt
nnoremap <leader>7 7gt
nnoremap <leader>8 8gt
nnoremap <leader>9 9gt
"Previous and next window
nnoremap <leader>m gt
nnoremap <leader>n gT

"Buffer navigation
nnoremap <Tab> :buffers<CR>:buffer<Space>
